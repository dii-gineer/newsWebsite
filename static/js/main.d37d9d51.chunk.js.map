{"version":3,"sources":["componentes/Header.js","componentes/Noticia.js","componentes/Noticias.js","componentes/Formulario.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","href","titulo","Noticia","_props$noticia","noticia","urlToImage","url","title","source","imagen","author","src","name","target","rel","Noticias","this","noticias","map","componentes_Noticia","key","Component","Formulario","categoriaRef","React","createRef","cambiarCategoria","e","preventDefault","_this","consultarNoticias","current","value","onSubmit","ref","defaultValue","type","App","state","categoria","arguments","length","undefined","concat","fetch","then","respuesta","json","setState","articles","componentes_Header","componentes_Formulario","Noticias_Noticias","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d37d9d51.chunk.js","sourcesContent":["import React from 'react';\r\nimport  PropTypes from 'prop-types'\r\n\r\nconst Header = (props) => {\r\n    return(\r\n        <nav>\r\n            <div className=\"nav-wrapper black \">\r\n                <a href=\"/\"className=\"brand-logo center\">{props.titulo}</a>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired \r\n}\r\n\r\nexport default Header;\r\n\r\n","import React from 'react'\r\nimport  PropTypes from 'prop-types'\r\n\r\n\r\nconst Noticia = (props)=>  {\r\n\r\n    const { urlToImage, url,title,source,author}= props.noticia;\r\n\r\n    const imagen = (urlToImage) ?\r\n    <div className=\"card-image\">  \r\n            <img src={urlToImage} />\r\n    </div>\r\n     : \"\";\r\n\r\n\r\n    return(\r\n        <div className=\"col s12 m6 l3\">\r\n            <div className=\"card  medium\">\r\n                {imagen}\r\n                <div className=\"card-content\">\r\n                    <p><b>{title} </b> </p>\r\n                    <p>Noticia de {source.name}</p>\r\n                   \r\n                </div>\r\n                <div className=\"card-action\">\r\n                    <a href ={url} target=\"_blank\"  rel=\"noopener noreferrer\" className=\"waves-effects waves-light btn\"> Noticia Completa </a>\r\n\r\n\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nNoticia.propTypes={\r\n    noticia: PropTypes.shape({\r\n        urlToImage:PropTypes.string.isRequired,\r\n        url: PropTypes.string.isRequired,\r\n        title:PropTypes.string.isRequired,\r\n        source:PropTypes.object.isRequired,\r\n        \r\n    })\r\n\r\n}\r\nexport default Noticia;","import React,{Component} from 'react';\r\nimport Noticia from './Noticia'\r\nimport  PropTypes from 'prop-types'\r\n\r\nexport default class Noticias extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                {this.props.noticias.map(noticia=>(\r\n                        <Noticia\r\n                            key = {noticia.url}\r\n                            noticia= {noticia}\r\n                         />   \r\n                ))}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nNoticias.propTypes ={\r\n    noticias: PropTypes.array.isRequired\r\n}","import React,{Component} from 'react';\r\nimport  PropTypes from 'prop-types'\r\n\r\n class Formulario extends Component {\r\n    categoriaRef = React.createRef();\r\n    cambiarCategoria = (e)=> {\r\n        e.preventDefault();\r\n\r\n        //enviar por props\r\n        this.props.consultarNoticias(this.categoriaRef.current.value);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"buscador row\">\r\n                <div className=\"col s12 m8 offset-m2\">\r\n                    <form onSubmit = {this.cambiarCategoria}>\r\n                        <h2>Noticias Por Categoria</h2>\r\n                        <div className=\"input-field col s12 m8\">\r\n                            <select ref={this.categoriaRef}>\r\n                                <option value=\"general\" defaultValue>General</option>\r\n                                <option value=\"business\" >Negocios</option>\r\n                                <option value=\"entertainment\" >Entretenimiento</option>\r\n                                <option value=\"health\" >Salud</option>\r\n                                <option value=\"science\" >Ciencia</option>\r\n                                <option value=\"sports\" >Deportes</option>\r\n                                <option value=\"technology\" >Tecnolog√≠a</option>\r\n                                \r\n                            </select>\r\n                        </div>\r\n                        <div className=\"input-field col s12 m4 enviar\">\r\n                            <input type =\"submit\" className=\"btn amber darken-2\" value=\"Buscar\"/>\r\n\r\n                        </div>\r\n                    </form>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\nFormulario.propTypes = {\r\n\r\n    consultarNoticias: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React, { Component } from 'react';\nimport Header from './componentes/Header'\nimport Noticias from './componentes/Noticias'\nimport Formulario from './componentes/Formulario'\n\nclass App extends Component {\n\n  state = {\n    noticias :[]\n  }\n\n  componentDidMount(){\n    this.consultarNoticias();\n  }\n\n  consultarNoticias = (categoria = 'general') => {\n    let url = `https://newsapi.org/v2/top-headlines?country=mx&category=${categoria}&apiKey=552eef7c5e0d48289a037b3af396d542`\n    \n    fetch(url)\n    .then(respuesta => {\n      return respuesta.json();\n    })\n    .then(noticias =>{\n      this.setState({\n        noticias: noticias.articles\n      })\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"contenedor-app\">\n        <Header\n          titulo= \"Noticias\" />\n\n        \n        <div className=\"container white contenedor-noticias\">\n          <Formulario\n            consultarNoticias = {this.consultarNoticias}\n          \n          />\n\n          <Noticias\n            noticias = {this.state.noticias} />\n        </div>\n\n\n      </div>\n      \n   \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}